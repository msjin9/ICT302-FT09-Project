# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    paths:
      - '**'
      # ignore changes to github/workflows
      - '!.github/workflows/**'
      # activate GitHub Actions when this file is edited
      - '.github/workflows/node.js.yml'
      # ignore markdown
      - '!**.md'
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [12.x, 14.x, 15.x]
        include:
          - os: ubuntu-latest
            move-built-source: mv "dist" "../server/src/views"
          - os: windows-latest
            move-built-source: move "dist" "..\server\src\views"

    steps:
    - name: Make git use LF
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf

    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Generate yarn.lock (server)
      working-directory: ./server
      run: yarn import

    - name: Generate yarn.lock (client)
      working-directory: ./client
      run: yarn import

    - name: Cache yarn dependencies
      id: yarn-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install packages (server)
      working-directory: ./server
      if: steps:yarn-cache.outputs.cache-hit != 'true'
      run: yarn --prefer-offline

    - name: Apply linting to package (server)
      working-directory: ./server
      run: yarn lint --if-present

    - name: Run tests (server)
      working-directory: ./server
      run: yarn test

    - name: Install packages (client)
      working-directory: ./client
      if: steps:yarn-cache.outputs.cache-hit != 'true'
      run: yarn --prefer-offline

    - name: Apply linting to package (client)
      working-directory: ./client
      run: yarn lint --if-present

    - name: Build package (client)
      working-directory: ./client
      run: yarn build --if-present

    - name: Run tests (client)
      working-directory: ./client
      run: yarn test

    - name: Move built package to server
      working-directory: ./client
      run: ${{ matrix.move-built-source }}

    - name: Test web app (linux-only)
      working-directory: ./server
      if: contains(matrix.os, 'ubuntu')
      run: |
        yarn serve &
        sleep 5
        trap 'exit(0)' SIGINT
        kill -SIGINT $(lsof -t -i:8080)

    - name: Test web app (windows-only)
      working-directory: ./server
      if: contains(matrix.os, 'windows')
      run: |
        Start-Job { Set-Location $using:PWD; yarn serve }
        Start-Sleep -Seconds 5
        Get-Job | Stop-Job
